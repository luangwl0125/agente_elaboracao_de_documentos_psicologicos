import streamlit as st
import datetime
import logging
import time
import re
from docx import Document  # Corrigido de `document` para `Document`.
from io import BytesIO  # Corrigido de `bytesio` para `BytesIO`.
from PyPDF2 import PdfReader  # Corrigido de `pdfreader` para `PdfReader`.
from PIL import Image  # Corrigido de `image` para `Image`.
import pytesseract
import openai

logging.basicConfig(level=logging.INFO)
openai.api_key = st.secrets["openai_api_key"]
assistant_id = "asst_am7evj3dygihdztqx0boe0e6"

def extrair_texto_arquivo(files):
    textos = []
    for file in files:
        try:
            if file.type == "application/pdf":
                reader = PdfReader(file)
                texto = "\n".join(page.extract_text() or "" for page in reader.pages)
                textos.append(texto.strip() or "[pdf sem texto detect√°vel]")
            elif file.type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
                doc = Document(file)
                texto = "\n".join([p.text for p in doc.paragraphs])
                textos.append(texto.strip() or "[docx sem texto detect√°vel]")
            elif file.type.startswith("image/"):
                image = Image.open(file)
                texto = pytesseract.image_to_string(image, lang="por")
                textos.append(texto.strip() or "[imagem sem texto detect√°vel]")
            else:
                textos.append(f"[tipo de arquivo n√£o suportado: {file.type}]")
        except Exception as e:
            logging.error(f"erro ao extrair texto de {file.name}: {e}")
            textos.append(f"[erro ao extrair texto: {e}]")
    return textos

def sanitize_filename(filename):
    return re.sub(r'[^a-zA-Z0-9_\-\.]', '_', filename)

def obter_campos_por_tipo_documento(tipo):
    estrutura = {
        "declara√ß√£o psicol√≥gica": ["nome completo do(a) paciente", "finalidade da declara√ß√£o", "informa√ß√µes sobre o atendimento"],
        "atestado psicol√≥gico": ["nome da pessoa/institui√ß√£o atendida", "solicitante", "finalidade", "descri√ß√£o das condi√ß√µes psicol√≥gicas", "cid (opcional)", "observa√ß√µes finais"],
        "relat√≥rio psicol√≥gico": ["identifica√ß√£o", "descri√ß√£o da demanda", "procedimento", "an√°lise", "conclus√£o"],
        "relat√≥rio multiprofissional": ["identifica√ß√£o", "descri√ß√£o da demanda", "procedimento", "an√°lise", "conclus√£o"],
        "laudo psicol√≥gico": ["identifica√ß√£o", "descri√ß√£o da demanda", "procedimento", "an√°lise", "conclus√£o", "refer√™ncias"],
        "parecer psicol√≥gico": ["identifica√ß√£o", "descri√ß√£o da demanda", "an√°lise", "conclus√£o", "refer√™ncias"]
    }
    return estrutura.get(tipo, [])

def gerar_campos_dinamicos(campos):
    respostas = {}
    arquivos = {}

    for campo in campos:
        col1, col2 = st.columns([2, 1])  # Colunas para layout
        with col1:
            st.markdown(f"**{campo}**")
            resposta = st.text_area("op√ß√£o: anexe um documento que contenha a informa√ß√£o.", key=f"text_area_{campo}")
            respostas[campo] = resposta
        with col2:
            arquivos[campo] = st.file_uploader("Anexar arquivo", type=["pdf", "docx", "png", "jpg", "jpeg"], key=f"{campo}", accept_multiple_files=True)  # Permitir m√∫ltiplos arquivos
    return respostas, arquivos

def enviar_para_assistente(user_message):
    try:
        thread = openai.beta.threads.create()
        openai.beta.threads.messages.create(thread_id=thread.id, role="user", content=user_message)
        run = openai.beta.threads.runs.create(thread_id=thread.id, assistant_id=assistant_id)
        while True:
            run = openai.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
            if run.status == "completed":
                break
            time.sleep(1)
        messages_list = openai.beta.threads.messages.list(thread_id=thread.id)
        for msg in reversed(messages_list.data):
            if msg.role == "assistant":
                return msg.content[0].text.value
        return "[resposta n√£o encontrada]"
    except Exception as e:
        logging.error(f"erro na api assistants: {e}")
        return f"[erro ao interagir com o assistente: {e}]"

def exportar_para_docx(texto):
    doc = Document()
    for paragrafo in texto.split("\n"):
        doc.add_paragraph(paragrafo.strip())
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer

# Verifica se os termos foram aceitos
if 'accepted_terms' not in st.session_state:
    st.session_state.accepted_terms = False

if not st.session_state.accepted_terms:
    if st.button("Leia os termos de uso e aceito continuar"):
        st.session_state.accepted_terms = True
        st.experimental_rerun()

    # Apresenta os termos de uso e privacidade ao usu√°rio
    st.header("Termos de Uso e Pol√≠tica de Privacidade")
    st.markdown("""
    üõ°Ô∏è **Compromisso com a √©tica, seguran√ßa e sigilo profissional**

    Este servi√ßo foi desenvolvido como ferramenta de apoio t√©cnico √† elabora√ß√£o de documentos psicol√≥gicos, com base nas diretrizes estabelecidas pela **Resolu√ß√£o CFP n¬∫ 06/2019**.

    ...

    **Ao utilizar este sistema, voc√™ declara ci√™ncia de que respeita e segue os preceitos √©ticos da profiss√£o e assume a responsabilidade t√©cnica e legal pelos documentos emitidos com o apoio desta ferramenta.**
    """)
    st.stop()

# Continua√ß√£o do aplicativo
st.header("üß† Psic√≥logo Assistente üß†", divider="gray")
st.write("")  # adiciona uma linha de espa√ßo

# Entrada de nome
nome = st.text_input("Seu Nome Completo")

# Entrada do CRP
numero = st.text_input("CRP", max_chars=10)

# Entrada da data
data = st.date_input("Data", value=datetime.date.today())

# Mensagem de boas-vindas
if nome and numero:
    st.write(f"Ol√°, {nome}! | CRP: {numero}")

st.markdown("----")

# Tipo de documento
tipo_documento = st.selectbox("Selecione o tipo de documento que voc√™ quer assist√™ncia na elabora√ß√£o", [
    "Declara√ß√£o Psicol√≥gica",
    "Atestado Psicol√≥gico",
    "Relat√≥rio Psicol√≥gico",
    "Relat√≥rio Multiprofissional",
    "Laudo Psicol√≥gico",
    "Parecer Psicol√≥gico"
])

st.write("----")  # adiciona uma linha de espa√ßo

# Campos din√¢micos
campos = obter_campos_por_tipo_documento(tipo_documento)
respostas, arquivos = gerar_campos_dinamicos(campos)

enviar = st.button("üîç Gerar Documento")

if enviar:
    conteudo = f"Tipo de documento: {tipo_documento}\n\n"
    for campo in campos:
        if arquivos[campo]:
            textos_extraidos = extrair_texto_arquivo(arquivos[campo])
            conteudo += f"{campo}:\n" + "\n".join(textos_extraidos) + "\n\n"
        else:
            conteudo += f"{campo}:\n{respostas[campo]}\n\n"

    resposta = enviar_para_assistente(conteudo)
    st.subheader("üìÑ Documento Gerado")
    st.text_area("Conte√∫do", resposta, height=400)
    buffer = exportar_para_docx(resposta)
    st.download_button("üì• Baixar .docx", data=buffer, file_name=f"{sanitize_filename(tipo_documento)}.docx", mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document")
    st.info("üîç Este documento deve ser revisado pelo psic√≥logo respons√°vel antes do uso oficial.")


    
# Termos de uso e consentimento inicial
if 'accepted_terms' not in st.session_state:
    st.session_state.accepted_terms = False

if not st.session_state.accepted_terms:
    st.header("Termos de Uso e Pol√≠tica de Privacidade")
    st.markdown("""
    üõ°Ô∏è **Compromisso com a √âtica, Seguran√ßa e Sigilo Profissional**

                
    Este servi√ßo foi desenvolvido como ferramenta de apoio t√©cnico √† elabora√ß√£o de documentos psicol√≥gicos, com base nas diretrizes estabelecidas pela **Resolu√ß√£o CFP n¬∫ 06/2019**, pela **Resolu√ß√£o CFP n¬∫ 01/2009 (Pol√≠tica de Prote√ß√£o de Dados)** e pelo **C√≥digo de √âtica Profissional do Psic√≥logo**.

                
    üß† **Responsabilidade T√©cnica e √âtica**  
    As produ√ß√µes dos documentos devem **obrigatoriamente ser revisadas, validadas e assinadas por psic√≥loga(o) devidamente inscrita(o) no CRP**, conforme determina a legisla√ß√£o profissional.  
    O conte√∫do gerado **n√£o substitui o julgamento cl√≠nico e t√©cnico do profissional**.

                
    üìå **Finalidade do Sistema**  
    Este assistente virtual tem como √∫nico prop√≥sito **auxiliar a(o) psic√≥loga(o)** na sistematiza√ß√£o de informa√ß√µes, organiza√ß√£o textual e conformidade estrutural de documentos, sempre respeitando os princ√≠pios de autonomia, consentimento informado, sigilo, n√£o exposi√ß√£o e √©tica nas rela√ß√µes profissionais.
                

    ‚öñÔ∏è **Refer√™ncias Normativas**
    - Resolu√ß√£o CFP n¬∫ 06/2019 ‚Äì Elabora√ß√£o de Documentos Escritos Produzidos pela(o) Psic√≥loga(o)
    - C√≥digo de √âtica Profissional do Psic√≥logo ‚Äì Artigos 1¬∫, 9¬∫, 13¬∫ e 14¬∫
    - Resolu√ß√£o CFP n¬∫ 11/2018 ‚Äì Sobre uso de tecnologias da informa√ß√£o e comunica√ß√£o
    - LGPD (Lei Geral de Prote√ß√£o de Dados) ‚Äì Aplicabilidade ao contexto psicol√≥gico
                

    üîí **Privacidade e Prote√ß√£o de Dados**  
    - Esta ferramenta foi constru√≠da em conformidade com:
    - O C√≥digo de √âtica do Profissional Psic√≥logo (Resolu√ß√£o CFP n¬∫ 010/2005);
    - A Resolu√ß√£o CFP n¬∫ 06/2019: Elabora√ß√£o de Documentos Escritos Produzidos pela(o) Psic√≥loga(o);
    - Resolu√ß√£o CFP n¬∫ 11/2018: Sobre uso de tecnologias da informa√ß√£o e comunica√ß√£o
    - Criptografia em tr√¢nsito (HTTPS): Criptografia de Ponta a Ponta para Proteger Dados em Tr√¢nsito e em Repouso. Todos os dados s√£o protegidos contra intercepta√ß√£o.
    - Controle de acesso: APIs protegidas com autentica√ß√£o para impedir acesso n√£o autorizado.
    - Valida√ß√£o de entrada: Valida√ß√µes autom√°ticas, evitando inje√ß√µes maliciosas ou erros l√≥gicos.
    - Registros e auditoria: Rastreamento de dados com precis√£o (data/hora e autor), ajudando na responsabiliza√ß√£o e conformidade com normas como a LGPD.
    - Anonimiza√ß√£o: Omiss√£o de dados sens√≠veis antes de armazenar ou compartilhar informa√ß√µes JSON, promovendo privacidade.
    - Normas da Lei Geral de Prote√ß√£o de Dados Pessoais (Lei n¬∫ 13.709/2018), que regula o tratamento de dados pessoais no Brasil. Seu objetivo principal √© garantir o direito √† privacidade e √† prote√ß√£o dos dados dos cidad√£os, estabelecendo regras claras sobre coleta, uso, armazenamento e compartilhamento de informa√ß√µes pessoais por empresas, √≥rg√£os p√∫blicos e profissionais aut√¥nomos incluindo psic√≥logas(os).
                
    Ao utilizar este sistema, voc√™ declara ci√™ncia de que **respeita e segue os preceitos √©ticos da profiss√£o** e que **assume a responsabilidade t√©cnica e legal pelos documentos emitidos** com o apoio desta ferramenta.
    """)
    if st.button("Aceito os Termos e Continuar"):
        st.session_state.accepted_terms = True
        st.experimental_rerun()
    st.stop()